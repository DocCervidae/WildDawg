#      xlab = "Age (years)",
#      ylab = "Dom. Height (ft)")
#
# rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4],
#      col = "grey80")
#
# abline(v=seq(0,35,5), col = "white", lty = 2)
# abline(h=seq(0,100,10), col = "white", lty = 2)
#
# lines(H~A,
#       data = my_base,
#       lwd = 1,
#       lty = 2,
#       col ="black")
new_data <- calc_table()
# lines(H ~A,
#       data = new_data,
#       lwd = 3,
#       col = "red")
#
# SI = round(H2(new_data$H[1], A1 = new_data$A[1], 25),0)
#
# text(5,85.5,paste("Site Index ", SI), cex = 2.5, col = "white")
# text(5,86,paste("Site Index ", SI), cex = 2.5, col = "navy")
#
# with(new_data,
#      points(c(A[1], A[length(A)]),
#             c(H[1],H[length(H)]),
#             pch = 21,
#             col = "red",
#             bg = "yellow"))
plot_ly() %>%
add_lines(data = my_base, x = ~A, y = ~H, color = I("black"), line = list(dash = "dash")) %>%
add_lines(data = my_base, x = ~A, y = ~H, color = I("red")) %>%
layout(xaxis = list(title = "Age"),
yaxis = list(title = "Height"))
})
##### Survival Plot #####
output$SurvivalPlot <- renderPlotly({
my_base <- my_base()
# par(bg = "grey30", fg = "white", col = "white")
# plot(c(0,35),c(0,1100), type = "n",
#     xlab = "Age (years)",
#     ylab = "Survival (trees/acre)")
#
#
# rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col =
#    "grey80")
#    abline(v=seq(0,35,5), col = "white", lty = 2)
#    abline(h=seq(0,1000,100), col = "white", lty = 2)
#
# lines(N ~ A,
#      my_base,
#      lty = 2,
#      col ="black")
new_data <- calc_table()
# lines( N ~ A,
#      new_data,
#      lwd = 3,
#      col = "red")
#
# with(new_data, points(c(A[1], A[length(A)]),
#              c(N[1],N[length(N)]),
#              pch = 21,
#              col = "red",
#              bg = "yellow"))
plot_ly() %>%
add_lines(data = my_base,
x = ~A,
y = ~N,
color = I("black"),
line = list(dash = "dash"),
name = "Base") %>%
add_lines(data = new_data,
x = ~A,
y = ~N,
color = I("red"),
name = "Current") %>%
layout(xaxis = list(title = list(text = "Age")),
yaxis = list(title = list(text = "N")))
})
##### Basal Area Plot #######
output$BasalArea <- renderPlotly({my_base <- my_base()
# plot(c(0,35),c(0,300), type = "n",
# xlab = "Age (years)",
# ylab = "Basal Area (ft2/acre)")
#
#  # Now set the plot region to grey
# rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col =
#     "grey80")
# abline(v=seq(0,35,5), col = "white", lty = 2)
# abline(h=seq(0,500,50), col = "white", lty = 2)
#
# lines(G ~ A, my_base, lty = 2,
#       col ="black")
newData <- calc_table()
# lines(G ~ A, newData, lwd = 3, col = "red")
# with(newData, points(c(A[1], A[length(A)]), c(G[1], G[length(G)]), pch = 21, col = "red", bg = "yellow"))
plot_ly() %>%
add_lines(data = my_base,
x = ~A,
y = ~G,
color = I("black"),
line = list(dash = "dash"),
name = "Base") %>%
add_lines(data = newData,
x = ~A,
y = ~G,
color = I("red"),
name = "Current") %>%
layout(xaxis = list(title = list(text = "Age (years)")),
yaxis = list(title = list(text = "Basal Area (sq.ft/acre)")))
})
####### Deer Plot #####
output$Deer <- renderPlotly({
newData <- calc_table() %>%
mutate(G = round(G, 1))
newData$G <- round(newData$G, 1)
newDeer <- merge(newData, deer, by.x = "G", by.y = "BA", all.x = F, all.y = F) %>%
as_tibble() %>%
mutate(med = (med/(365*2.47))*100)
min.age  <- min(newDeer$A)
max.age <- max(newDeer$A)
control.ages <- min.age:input$ThAge
one.year.ages <- seq(input$ThAge+1, max.age, 2)
two.year.ages <- seq(input$ThAge+2, max.age, 2)
controlData <- newDeer %>% filter(Treatment.Act == "Control") %>%
arrange(A)%>%
mutate(plotID = "controlplot")
fireData <- newDeer %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Fire" & A %in% one.year.ages & Recovery == 0 |
Treatment.Act == "Fire" & A %in% two.year.ages & Recovery == 1) %>%
arrange(A) %>%
mutate(plotID = "fireplot")
herbData <- newDeer %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Herbicide" & A == input$ThAge+1 & Recovery == 0 |
Treatment.Act == "Herbicide" & A > input$ThAge+1 & Recovery == 1) %>%
arrange(A)%>%
mutate(plotID = "herbplot")
mixData <- newDeer %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Mix" & A == input$ThAge+1 & Recovery == 0 |
Treatment.Act == "Mix" & A %in% one.year.ages[-which(one.year.ages == input$ThAge+1)] & Recovery == 0 |
Treatment.Act == "Mix" & A %in% two.year.ages & Recovery == 1) %>%
arrange(A) %>%
mutate(plotID = "mixplot")
plot_ly() %>%
add_lines(data=controlData, x = ~A, y = ~med, name = "None", color = I("black"), line = list(dash = "dash")) %>%
add_lines(data=fireData, x = ~A, y = ~med, name = "Fire", color = I("red")) %>%
add_lines(data=herbData, x = ~A, y = ~med, name = "Herbicide", color = I("darkgreen")) %>%
add_lines(data=mixData, x = ~A, y = ~med, name = "Mix", color = I("darkorange")) %>%
layout(xaxis = list(title = "Age"),
yaxis = list(title = "Nutritional Carrying Capacity\n(deer/100 acres)",
autorange = F,
range = list(0,30)),
legend = list(title = list(text = "Post-thin Treatment")))
})
##### Quail Plot ######
output$Quail <- renderPlotly({
newData <- calc_table()
newData$G <- round(newData$G, 1)
quailData <- merge(newData, quail, by.x = "G", by.y = "BA", all.x = F, all.y = F) %>%
as_tibble()
min.age  <- min(quailData$A)
max.age <- max(quailData$A)
control.ages <- min.age:input$ThAge
one.year.ages <- seq(input$ThAge+1, max.age, 2)
two.year.ages <- seq(input$ThAge+2, max.age, 2)
controlData <- quailData %>% filter(Treatment.Act == "Control") %>%
arrange(A)%>%
mutate(plotID = "controlplot")
fireData <- quailData %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Fire" & A %in% one.year.ages & Recovery == 0 |
Treatment.Act == "Fire" & A %in% two.year.ages & Recovery == 1) %>%
arrange(A) %>%
mutate(plotID = "fireplot")
herbData <- quailData %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Herbicide" & A == input$ThAge+1 & Recovery == 0 |
Treatment.Act == "Herbicide" & A > input$ThAge+1 & Recovery == 1) %>%
arrange(A)%>%
mutate(plotID = "herbplot")
mixData <- quailData %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Mix" & A == input$ThAge+1 & Recovery == 0 |
Treatment.Act == "Mix" & A %in% one.year.ages[-which(one.year.ages == input$ThAge+1)] & Recovery == 0 |
Treatment.Act == "Mix" & A %in% two.year.ages & Recovery == 1) %>%
arrange(A) %>%
mutate(plotID = "mixplot")
plot_ly() %>%
add_lines(data=controlData, x = ~A, y = ~med, name = "None", color = I("black"), line = list(dash = "dash")) %>%
add_lines(data=fireData, x = ~A, y = ~med, name = "Fire", color = I("red")) %>%
add_lines(data=herbData, x = ~A, y = ~med, name = "Herbicide", color = I("darkgreen")) %>%
add_lines(data=mixData, x = ~A, y = ~med, name = "Mix", color = I("darkorange")) %>%
layout(xaxis = list(title = "Age"),
yaxis = list(title = "Quail Habitat Quality Index",
autorange = F,
range = list(0,1)),
legend = list(title = list(text = "Post-thin Treatment")))
})
##### Plant Diversity Plot ######
output$Diversity <- renderPlotly({
newData <- calc_table()
newData$G <- round(newData$G, 1)
divData <- merge(newData, diversity, by.x = "G", by.y = "BA", all.x = F, all.y = F) %>%
as_tibble()
min.age  <- min(divData$A)
max.age <- max(divData$A)
control.ages <- min.age:input$ThAge
one.year.ages <- seq(input$ThAge+1, max.age, 2)
two.year.ages <- seq(input$ThAge+2, max.age, 2)
controlData <- divData %>% filter(Treatment.Act == "Control") %>%
arrange(A)%>%
mutate(plotID = "controlplot")
fireData <- divData %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Fire" & A %in% one.year.ages & Recovery == 0 |
Treatment.Act == "Fire" & A %in% two.year.ages & Recovery == 1) %>%
arrange(A) %>%
mutate(plotID = "fireplot")
herbData <- divData %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Herbicide" & A == input$ThAge+1 & Recovery == 0 |
Treatment.Act == "Herbicide" & A > input$ThAge+1 & Recovery == 1) %>%
arrange(A)%>%
mutate(plotID = "herbplot")
mixData <- divData %>% filter(Treatment.Act == "Control" & A %in% control.ages |
Treatment.Act == "Mix" & A == input$ThAge+1 & Recovery == 0 |
Treatment.Act == "Mix" & A %in% one.year.ages[-which(one.year.ages == input$ThAge+1)] & Recovery == 0 |
Treatment.Act == "Mix" & A %in% two.year.ages & Recovery == 1) %>%
arrange(A) %>%
mutate(plotID = "mixplot")
plot_ly() %>%
add_lines(data=controlData, x = ~A, y = ~med, name = "None", color = I("black"), line = list(dash = "dash")) %>%
add_lines(data=fireData, x = ~A, y = ~med, name = "Fire", color = I("red")) %>%
add_lines(data=herbData, x = ~A, y = ~med, name = "Herbicide", color = I("darkgreen")) %>%
add_lines(data=mixData, x = ~A, y = ~med, name = "Mix", color = I("darkorange")) %>%
layout(xaxis = list(title = "Age"),
yaxis = list(title = "Plant Diversity\n(species/sq. meter)",
autorange = F,
range = list(0,20)),
legend = list(title = list(text = "Post-thin Treatment")))
})
##### Volume Plot #####
output$Volume <- renderPlotly({
my_base <- my_base()
new_data <- calc_table()
plot_ly() %>%
add_lines(data = my_base,line = list(dash = "dash"), x = ~A, y = ~V, name = "Base", color = I("black"), linetype = 2) %>%
add_lines(data = new_data, x = ~A, y = ~V, name = "Current Total",color = I("red")) %>%
add_lines(data = new_data, x = ~A, y = ~Vpulp, name = "Pulpwood", color = I("blue")) %>%
add_lines(data = new_data, x = ~A, y = ~Vchns, name = "Chip & Saw", color = I("green")) %>%
add_lines(data = new_data, x = ~A, y = ~Vsaw, name = "Sawtimber", color = I("brown")) %>%
layout(xaxis = list(title = list(text = "Age")),
yaxis = list(title = "Volume (ft^3/acre)"))
})
##### Dry Weight Plot ######
output$DryWeight <- renderPlotly({my_base <- my_base()
# plot(c(0,35),c(0,100), type = "n",
#      xlab = "Age (years)",
#      ylab = "Dry Weight (Ton/acre)",
#      main = "Total Weight ib.")
#
# # Now set the plot region to grey
# rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col =
#        "grey80")
# abline(v=seq(0,35,5), col = "white", lty = 2)
# abline(h=seq(0,100,10), col = "white", lty = 2)
#
new_data <- calc_table()
# lines(DW ~ A, my_base, lty = 2,
#       col = "black")
# lines(DW ~ A, new_data, col = "red", lwd = 3)
# with(new_data,
#      points(c(A[1], A[length(A)]), c(DW[1], DW[length(DW)]), pch = 21, col = "red", bg = "yellow"))
#
plot_ly() %>%
add_lines(data = my_base,
x = ~A,
y = ~DW,
color = I("black"),line = list(dash = "dash"),
name = "Base") %>%
add_lines(data = new_data,
x = ~A,
y = ~DW,
color = I("red"),
name = "Current") %>%
layout(xaxis = list(title = list(text = "Age")),
yaxis = list(title = list(text = "Dry Weight (tons/acre)")))
})
##### QDM Plot #####
output$QMD <- renderPlotly({
my_base <- my_base()
new_data <- calc_table()
plot_ly() %>%
add_lines(data = my_base,
x = ~A,
y = ~Dq,
color = I("black"),line = list(dash = "dash"),
name = "Base") %>%
add_lines(data = new_data,
x = ~A,
y = ~Dq,
color = I("red"),
name = "Current") %>%
layout(xaxis = list(title = list(text = "Age")),
yaxis = list(title = list(text = "Quadratic Mean Diameter (in)")))
})
##### Extraction Plot ######
output$Extraction   <- renderPlotly({
my_base <- my_base()
my_cols <- c("Gold", "darkseagreen1", "plum2")
my_table <- calc_table()
outs <- t(matrix(apply(extraction(), 2, diffinv)[length(extraction()[,1])+1,], nrow = 2, ncol = 3, byrow = TRUE))
maxVol <- max(my_table$V[length(my_table[,1])], sum(outs[,1]), sum(outs[,2]))
outs <- as.data.frame(outs)
colnames(outs) <- c("Thinning Removals","Harvest Removals")
outs$Products <- c("Pulpwood", "Chip and Saw", "Sawtimber")
# barplot(outs, col = my_cols,
#         ylab = "Volume (ft3/acre)",
#         ylim = c(0,ceiling(maxVol)+200),
#         border = "grey20")
#
# rect(par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4], col =
#        "grey80")
#
# abline(h = seq(0,ceiling(maxVol)+200, 500), lty = 2, col = "white")
#
# barplot(outs, col = my_cols,
#         ylab = "Volume (ft3/acre)",
#         ylim = c(0,ceiling(maxVol)+200),
#         border = "grey20",
#         #inside = FALSE,
#         add = TRUE)
#
# box(lwd = 3)
#
# legend("topleft",
#        fill = my_cols,
#        legend = c("Pulp", "Chip and saw", "Sawtimber"),
#        border = "grey",
#        density = 100)
new.out <- outs %>% as_tibble() %>%
pivot_longer(cols = c(`Thinning Removals`, `Harvest Removals`)) %>%
mutate(name = factor(name,
levels = c("Thinning Removals", "Harvest Removals")))
plot_ly() %>%
add_bars(data = new.out %>% filter(Products == "Pulpwood"), name = "Pulpwood",
x = ~name, y = ~value, color = I("darkgreen")) %>%
add_bars(data = new.out %>% filter(Products == "Chip and Saw"), name = "Chip & Saw",
x = ~name, y = ~value, color = I("brown")) %>%
add_bars(data = new.out %>% filter(Products == "Sawtimber"), name = "Sawtimber",
x = ~name, y = ~value, color = I("grey40")) %>%
layout(xaxis = list(title = "Product"),
yaxis = list(title = "Volume (ft^3/acre)",
rangemode = "nonnegative"),
barmode = "stack")
})
##### Yield Table #####
output$Yield.Table <- renderReactable({
Yield.table <- calc_table()
out <- extraction()
Yield.table[,14:16] <- (out[,1:3] + out[,4:6])/128 * 2.78
colnames(Yield.table)<-c("Age (years)",
"Dens. (trees/acre)",
"Height (ft)",
"BArea (ft2/acre)",
"Vol ob (ft3/acre)",
"Dry Weight (ton/acre)",
"Dq (inches)",
"Pulp (ft3/acre)",
"Chip-n-Saw (ft3/acre)",
"Sawtimber (ft3/acre)",
"GW Pulp (ton/acre)",
"GW Chip-n-saw (ton/acre)",
"GW Sawtimber (ton/acre)",
"Extracted Pulp (ton/acre)",
"Extracted Chip-nsaw (ton/acre)",
"Extracted Sawtimber (ton/acre)")
Yield.table <- Yield.table %>%
mutate(`Dens. (trees/acre)` = round(`Dens. (trees/acre)`,0)) %>%
mutate_at(.vars = 3:16, .funs = ~round(., digits = 2))
theme <- reactableTheme(color = "hsl(0, 0%, 90%)",
backgroundColor = "hsl(0, 0%, 10%)",
borderColor = "hsl(0, 0%, 18%)",
stripedColor = "hsl(0, 0%, 13%)",
headerStyle = list(`&:hover[aria-sort]` = list(backgroundColor = "hsl(0, 0%, 14%)")),
tableBodyStyle = list(color = "hsl(0, 0%, 75%)"),
rowHighlightStyle = list(color = "hsl(0, 0%, 90%)",
backgroundColor = "hsl(0, 0%, 14%)"),
selectStyle = list(backgroundColor = "hsl(0, 0%, 20%)"),
inputStyle = list(backgroundColor = "hsl(0, 0%, 10%)",
borderColor = "hsl(0, 0%, 21%)",
`&:hover, &:focus` = list(borderColor = "hsl(0, 0%, 30%)")),
pageButtonHoverStyle = list(backgroundColor = "hsl(0, 0%, 20%)"),
pageButtonActiveStyle = list(backgroundColor = "hsl(0, 0%, 24%)"))
reactable(Yield.table,
resizable = TRUE,
showPageSizeOptions = F,
outlined = TRUE,
highlight = TRUE,
compact = TRUE,
height = "auto",
fullWidth = FALSE,
defaultPageSize = 36,
# columns = list(Age = colDef(name = "Age", defaultSortOrder = "asc",
#                             align = "center"),
#                BLV = colDef(name = "Base Land Value",
#                             format = colFormat(currency = "USD",
#                                                digits = 2),
#                             align = "right"),
#                NPV = colDef(name = "Net Present Value",
#                             format = colFormat(currency = "USD",
#                                                digits = 2),
#                             align = "right")),
theme = theme)
})
##### Financial Plot #####
output$Financial <- renderPlotly({
financial <- calc_costs()
mxNPV <- financial$Age[financial$NPV == max(financial$NPV)]
mxBLV <- financial$Age[financial$BLV == max(financial$BLV)]
maxY <- max(max(financial$NPV),max(financial$BLV))
minY <- min(min(financial$NPV), min(financial$BLV))
financial %>%
plot_ly(.,y = ~NPV, x = ~Age) %>%
add_lines(name = "NPV",color = I("red")) %>%
add_lines(name = "BLV",y = ~BLV, x =~ Age, color = I("green")) %>%
layout(yaxis = list(title = list(text = "Value ($/acre)"),
zeroline = T,
zerolinecolor = I("black"),
zerolinewidth = 1.5),
xaxis = list(range = list(10,35)))
})
##### Financial Table ######
output$FinanTable <- renderReactable({
financial <- calc_costs()
finanicial <- financial %>% mutate_at(.vars = c(2,3), ~round(.,2))
theme <- reactableTheme(color = "hsl(0, 0%, 90%)",
backgroundColor = "hsl(0, 0%, 10%)",
borderColor = "hsl(0, 0%, 18%)",
stripedColor = "hsl(0, 0%, 13%)",
headerStyle = list(`&:hover[aria-sort]` = list(backgroundColor = "hsl(0, 0%, 14%)")),
tableBodyStyle = list(color = "hsl(0, 0%, 75%)"),
rowHighlightStyle = list(color = "hsl(0, 0%, 90%)",
backgroundColor = "hsl(0, 0%, 14%)"),
selectStyle = list(backgroundColor = "hsl(0, 0%, 20%)"),
inputStyle = list(backgroundColor = "hsl(0, 0%, 10%)",
borderColor = "hsl(0, 0%, 21%)",
`&:hover, &:focus` = list(borderColor = "hsl(0, 0%, 30%)")),
pageButtonHoverStyle = list(backgroundColor = "hsl(0, 0%, 20%)"),
pageButtonActiveStyle = list(backgroundColor = "hsl(0, 0%, 24%)"))
reactable(financial,
resizable = TRUE,
showPageSizeOptions = F,
outlined = TRUE,
highlight = TRUE,
compact = TRUE,
height = "auto",
fullWidth = FALSE,
defaultPageSize = 36,
columns = list(Age = colDef(name = "Age", defaultSortOrder = "asc",
align = "center"),
BLV = colDef(name = "Base Land Value",
format = colFormat(currency = "USD",
digits = 2),
align = "right"),
NPV = colDef(name = "Net Present Value",
format = colFormat(currency = "USD",
digits = 2),
align = "right")),
theme = theme)
})
##### Distribution Plot ######
output$Distribution <- renderPlot({
Yield.table <- calc_table()
Age <- input$cstDistributionAge
Yield.table <- Yield.table[Yield.table$A == Age,]
S <- H2(Yield.table$H, 25, Age)
values      <- GetDiameterDistribution(Age = Age,
N   = Yield.table$N,
H   = Yield.table$H,
G   = Yield.table$G,
S   = S)
barplot(values, names = seq(1:20), ylim = c(0,500), ylab = "Class population (trees/acre)", xlab = "Diameter Class (in)")
box()
})
##### Download Handler #####
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(calc_table(), file, row.names = FALSE)
}
)
output$home_img <- renderImage({
list(src = "GAMELablogo_white.png",
width = "60%",
height = "100%")
}, deleteFile = F)
output$planting <- renderPlot({
num.rows <- round(sqrt(input$N0), 0)
plot(x = seq(1,num.rows,1)+3,
seq(1,num.rows,1),
pch = 16)
})
# Stop running app when web browser window is closed
session$onSessionEnded(stopApp)
}
shinyApp(ui, server, options = list(launch.browser = T))
install.packages("shiny.blueprint")
install.packages("golem")
3/16
5/16
11/64
3/8
